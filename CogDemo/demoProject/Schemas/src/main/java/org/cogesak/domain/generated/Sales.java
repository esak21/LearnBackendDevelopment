/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cogesak.domain.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Sales extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6388869360752695226L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sales\",\"namespace\":\"org.cogesak.domain.generated\",\"fields\":[{\"name\":\"salesid\",\"type\":\"int\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"rating\",\"type\":\"double\"},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"platform\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"int\"},{\"name\":\"actualprice\",\"type\":\"int\"},{\"name\":\"offer\",\"type\":\"string\"},{\"name\":\"noratings\",\"type\":[\"null\",\"int\"]},{\"name\":\"noreviews\",\"type\":[\"null\",\"int\"]},{\"name\":\"star5\",\"type\":[\"null\",\"int\"]},{\"name\":\"star4\",\"type\":[\"null\",\"int\"]},{\"name\":\"star3\",\"type\":[\"null\",\"int\"]},{\"name\":\"star2\",\"type\":[\"null\",\"int\"]},{\"name\":\"star1\",\"type\":[\"null\",\"int\"]},{\"name\":\"fulfilled\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sales> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sales> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Sales> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Sales> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Sales> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Sales to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Sales from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Sales instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Sales fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int salesid;
  private java.lang.CharSequence title;
  private double rating;
  private java.lang.CharSequence category;
  private java.lang.CharSequence platform;
  private int price;
  private int actualprice;
  private java.lang.CharSequence offer;
  private java.lang.Integer noratings;
  private java.lang.Integer noreviews;
  private java.lang.Integer star5;
  private java.lang.Integer star4;
  private java.lang.Integer star3;
  private java.lang.Integer star2;
  private java.lang.Integer star1;
  private int fulfilled;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sales() {}

  /**
   * All-args constructor.
   * @param salesid The new value for salesid
   * @param title The new value for title
   * @param rating The new value for rating
   * @param category The new value for category
   * @param platform The new value for platform
   * @param price The new value for price
   * @param actualprice The new value for actualprice
   * @param offer The new value for offer
   * @param noratings The new value for noratings
   * @param noreviews The new value for noreviews
   * @param star5 The new value for star5
   * @param star4 The new value for star4
   * @param star3 The new value for star3
   * @param star2 The new value for star2
   * @param star1 The new value for star1
   * @param fulfilled The new value for fulfilled
   */
  public Sales(java.lang.Integer salesid, java.lang.CharSequence title, java.lang.Double rating, java.lang.CharSequence category, java.lang.CharSequence platform, java.lang.Integer price, java.lang.Integer actualprice, java.lang.CharSequence offer, java.lang.Integer noratings, java.lang.Integer noreviews, java.lang.Integer star5, java.lang.Integer star4, java.lang.Integer star3, java.lang.Integer star2, java.lang.Integer star1, java.lang.Integer fulfilled) {
    this.salesid = salesid;
    this.title = title;
    this.rating = rating;
    this.category = category;
    this.platform = platform;
    this.price = price;
    this.actualprice = actualprice;
    this.offer = offer;
    this.noratings = noratings;
    this.noreviews = noreviews;
    this.star5 = star5;
    this.star4 = star4;
    this.star3 = star3;
    this.star2 = star2;
    this.star1 = star1;
    this.fulfilled = fulfilled;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return salesid;
    case 1: return title;
    case 2: return rating;
    case 3: return category;
    case 4: return platform;
    case 5: return price;
    case 6: return actualprice;
    case 7: return offer;
    case 8: return noratings;
    case 9: return noreviews;
    case 10: return star5;
    case 11: return star4;
    case 12: return star3;
    case 13: return star2;
    case 14: return star1;
    case 15: return fulfilled;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: salesid = (java.lang.Integer)value$; break;
    case 1: title = (java.lang.CharSequence)value$; break;
    case 2: rating = (java.lang.Double)value$; break;
    case 3: category = (java.lang.CharSequence)value$; break;
    case 4: platform = (java.lang.CharSequence)value$; break;
    case 5: price = (java.lang.Integer)value$; break;
    case 6: actualprice = (java.lang.Integer)value$; break;
    case 7: offer = (java.lang.CharSequence)value$; break;
    case 8: noratings = (java.lang.Integer)value$; break;
    case 9: noreviews = (java.lang.Integer)value$; break;
    case 10: star5 = (java.lang.Integer)value$; break;
    case 11: star4 = (java.lang.Integer)value$; break;
    case 12: star3 = (java.lang.Integer)value$; break;
    case 13: star2 = (java.lang.Integer)value$; break;
    case 14: star1 = (java.lang.Integer)value$; break;
    case 15: fulfilled = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'salesid' field.
   * @return The value of the 'salesid' field.
   */
  public int getSalesid() {
    return salesid;
  }


  /**
   * Sets the value of the 'salesid' field.
   * @param value the value to set.
   */
  public void setSalesid(int value) {
    this.salesid = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'rating' field.
   * @return The value of the 'rating' field.
   */
  public double getRating() {
    return rating;
  }


  /**
   * Sets the value of the 'rating' field.
   * @param value the value to set.
   */
  public void setRating(double value) {
    this.rating = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'platform' field.
   * @return The value of the 'platform' field.
   */
  public java.lang.CharSequence getPlatform() {
    return platform;
  }


  /**
   * Sets the value of the 'platform' field.
   * @param value the value to set.
   */
  public void setPlatform(java.lang.CharSequence value) {
    this.platform = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public int getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(int value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'actualprice' field.
   * @return The value of the 'actualprice' field.
   */
  public int getActualprice() {
    return actualprice;
  }


  /**
   * Sets the value of the 'actualprice' field.
   * @param value the value to set.
   */
  public void setActualprice(int value) {
    this.actualprice = value;
  }

  /**
   * Gets the value of the 'offer' field.
   * @return The value of the 'offer' field.
   */
  public java.lang.CharSequence getOffer() {
    return offer;
  }


  /**
   * Sets the value of the 'offer' field.
   * @param value the value to set.
   */
  public void setOffer(java.lang.CharSequence value) {
    this.offer = value;
  }

  /**
   * Gets the value of the 'noratings' field.
   * @return The value of the 'noratings' field.
   */
  public java.lang.Integer getNoratings() {
    return noratings;
  }


  /**
   * Sets the value of the 'noratings' field.
   * @param value the value to set.
   */
  public void setNoratings(java.lang.Integer value) {
    this.noratings = value;
  }

  /**
   * Gets the value of the 'noreviews' field.
   * @return The value of the 'noreviews' field.
   */
  public java.lang.Integer getNoreviews() {
    return noreviews;
  }


  /**
   * Sets the value of the 'noreviews' field.
   * @param value the value to set.
   */
  public void setNoreviews(java.lang.Integer value) {
    this.noreviews = value;
  }

  /**
   * Gets the value of the 'star5' field.
   * @return The value of the 'star5' field.
   */
  public java.lang.Integer getStar5() {
    return star5;
  }


  /**
   * Sets the value of the 'star5' field.
   * @param value the value to set.
   */
  public void setStar5(java.lang.Integer value) {
    this.star5 = value;
  }

  /**
   * Gets the value of the 'star4' field.
   * @return The value of the 'star4' field.
   */
  public java.lang.Integer getStar4() {
    return star4;
  }


  /**
   * Sets the value of the 'star4' field.
   * @param value the value to set.
   */
  public void setStar4(java.lang.Integer value) {
    this.star4 = value;
  }

  /**
   * Gets the value of the 'star3' field.
   * @return The value of the 'star3' field.
   */
  public java.lang.Integer getStar3() {
    return star3;
  }


  /**
   * Sets the value of the 'star3' field.
   * @param value the value to set.
   */
  public void setStar3(java.lang.Integer value) {
    this.star3 = value;
  }

  /**
   * Gets the value of the 'star2' field.
   * @return The value of the 'star2' field.
   */
  public java.lang.Integer getStar2() {
    return star2;
  }


  /**
   * Sets the value of the 'star2' field.
   * @param value the value to set.
   */
  public void setStar2(java.lang.Integer value) {
    this.star2 = value;
  }

  /**
   * Gets the value of the 'star1' field.
   * @return The value of the 'star1' field.
   */
  public java.lang.Integer getStar1() {
    return star1;
  }


  /**
   * Sets the value of the 'star1' field.
   * @param value the value to set.
   */
  public void setStar1(java.lang.Integer value) {
    this.star1 = value;
  }

  /**
   * Gets the value of the 'fulfilled' field.
   * @return The value of the 'fulfilled' field.
   */
  public int getFulfilled() {
    return fulfilled;
  }


  /**
   * Sets the value of the 'fulfilled' field.
   * @param value the value to set.
   */
  public void setFulfilled(int value) {
    this.fulfilled = value;
  }

  /**
   * Creates a new Sales RecordBuilder.
   * @return A new Sales RecordBuilder
   */
  public static org.cogesak.domain.generated.Sales.Builder newBuilder() {
    return new org.cogesak.domain.generated.Sales.Builder();
  }

  /**
   * Creates a new Sales RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sales RecordBuilder
   */
  public static org.cogesak.domain.generated.Sales.Builder newBuilder(org.cogesak.domain.generated.Sales.Builder other) {
    if (other == null) {
      return new org.cogesak.domain.generated.Sales.Builder();
    } else {
      return new org.cogesak.domain.generated.Sales.Builder(other);
    }
  }

  /**
   * Creates a new Sales RecordBuilder by copying an existing Sales instance.
   * @param other The existing instance to copy.
   * @return A new Sales RecordBuilder
   */
  public static org.cogesak.domain.generated.Sales.Builder newBuilder(org.cogesak.domain.generated.Sales other) {
    if (other == null) {
      return new org.cogesak.domain.generated.Sales.Builder();
    } else {
      return new org.cogesak.domain.generated.Sales.Builder(other);
    }
  }

  /**
   * RecordBuilder for Sales instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sales>
    implements org.apache.avro.data.RecordBuilder<Sales> {

    private int salesid;
    private java.lang.CharSequence title;
    private double rating;
    private java.lang.CharSequence category;
    private java.lang.CharSequence platform;
    private int price;
    private int actualprice;
    private java.lang.CharSequence offer;
    private java.lang.Integer noratings;
    private java.lang.Integer noreviews;
    private java.lang.Integer star5;
    private java.lang.Integer star4;
    private java.lang.Integer star3;
    private java.lang.Integer star2;
    private java.lang.Integer star1;
    private int fulfilled;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.cogesak.domain.generated.Sales.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.salesid)) {
        this.salesid = data().deepCopy(fields()[0].schema(), other.salesid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.rating)) {
        this.rating = data().deepCopy(fields()[2].schema(), other.rating);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.platform)) {
        this.platform = data().deepCopy(fields()[4].schema(), other.platform);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.price)) {
        this.price = data().deepCopy(fields()[5].schema(), other.price);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.actualprice)) {
        this.actualprice = data().deepCopy(fields()[6].schema(), other.actualprice);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.offer)) {
        this.offer = data().deepCopy(fields()[7].schema(), other.offer);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.noratings)) {
        this.noratings = data().deepCopy(fields()[8].schema(), other.noratings);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.noreviews)) {
        this.noreviews = data().deepCopy(fields()[9].schema(), other.noreviews);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.star5)) {
        this.star5 = data().deepCopy(fields()[10].schema(), other.star5);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.star4)) {
        this.star4 = data().deepCopy(fields()[11].schema(), other.star4);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.star3)) {
        this.star3 = data().deepCopy(fields()[12].schema(), other.star3);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.star2)) {
        this.star2 = data().deepCopy(fields()[13].schema(), other.star2);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.star1)) {
        this.star1 = data().deepCopy(fields()[14].schema(), other.star1);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.fulfilled)) {
        this.fulfilled = data().deepCopy(fields()[15].schema(), other.fulfilled);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing Sales instance
     * @param other The existing instance to copy.
     */
    private Builder(org.cogesak.domain.generated.Sales other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.salesid)) {
        this.salesid = data().deepCopy(fields()[0].schema(), other.salesid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rating)) {
        this.rating = data().deepCopy(fields()[2].schema(), other.rating);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.category)) {
        this.category = data().deepCopy(fields()[3].schema(), other.category);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.platform)) {
        this.platform = data().deepCopy(fields()[4].schema(), other.platform);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.price)) {
        this.price = data().deepCopy(fields()[5].schema(), other.price);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.actualprice)) {
        this.actualprice = data().deepCopy(fields()[6].schema(), other.actualprice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.offer)) {
        this.offer = data().deepCopy(fields()[7].schema(), other.offer);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.noratings)) {
        this.noratings = data().deepCopy(fields()[8].schema(), other.noratings);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.noreviews)) {
        this.noreviews = data().deepCopy(fields()[9].schema(), other.noreviews);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.star5)) {
        this.star5 = data().deepCopy(fields()[10].schema(), other.star5);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.star4)) {
        this.star4 = data().deepCopy(fields()[11].schema(), other.star4);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.star3)) {
        this.star3 = data().deepCopy(fields()[12].schema(), other.star3);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.star2)) {
        this.star2 = data().deepCopy(fields()[13].schema(), other.star2);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.star1)) {
        this.star1 = data().deepCopy(fields()[14].schema(), other.star1);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.fulfilled)) {
        this.fulfilled = data().deepCopy(fields()[15].schema(), other.fulfilled);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'salesid' field.
      * @return The value.
      */
    public int getSalesid() {
      return salesid;
    }


    /**
      * Sets the value of the 'salesid' field.
      * @param value The value of 'salesid'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setSalesid(int value) {
      validate(fields()[0], value);
      this.salesid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'salesid' field has been set.
      * @return True if the 'salesid' field has been set, false otherwise.
      */
    public boolean hasSalesid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'salesid' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearSalesid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rating' field.
      * @return The value.
      */
    public double getRating() {
      return rating;
    }


    /**
      * Sets the value of the 'rating' field.
      * @param value The value of 'rating'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setRating(double value) {
      validate(fields()[2], value);
      this.rating = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rating' field has been set.
      * @return True if the 'rating' field has been set, false otherwise.
      */
    public boolean hasRating() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rating' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearRating() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.category = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearCategory() {
      category = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'platform' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlatform() {
      return platform;
    }


    /**
      * Sets the value of the 'platform' field.
      * @param value The value of 'platform'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setPlatform(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.platform = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'platform' field has been set.
      * @return True if the 'platform' field has been set, false otherwise.
      */
    public boolean hasPlatform() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'platform' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearPlatform() {
      platform = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public int getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setPrice(int value) {
      validate(fields()[5], value);
      this.price = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualprice' field.
      * @return The value.
      */
    public int getActualprice() {
      return actualprice;
    }


    /**
      * Sets the value of the 'actualprice' field.
      * @param value The value of 'actualprice'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setActualprice(int value) {
      validate(fields()[6], value);
      this.actualprice = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'actualprice' field has been set.
      * @return True if the 'actualprice' field has been set, false otherwise.
      */
    public boolean hasActualprice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'actualprice' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearActualprice() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'offer' field.
      * @return The value.
      */
    public java.lang.CharSequence getOffer() {
      return offer;
    }


    /**
      * Sets the value of the 'offer' field.
      * @param value The value of 'offer'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setOffer(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.offer = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'offer' field has been set.
      * @return True if the 'offer' field has been set, false otherwise.
      */
    public boolean hasOffer() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'offer' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearOffer() {
      offer = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'noratings' field.
      * @return The value.
      */
    public java.lang.Integer getNoratings() {
      return noratings;
    }


    /**
      * Sets the value of the 'noratings' field.
      * @param value The value of 'noratings'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setNoratings(java.lang.Integer value) {
      validate(fields()[8], value);
      this.noratings = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'noratings' field has been set.
      * @return True if the 'noratings' field has been set, false otherwise.
      */
    public boolean hasNoratings() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'noratings' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearNoratings() {
      noratings = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'noreviews' field.
      * @return The value.
      */
    public java.lang.Integer getNoreviews() {
      return noreviews;
    }


    /**
      * Sets the value of the 'noreviews' field.
      * @param value The value of 'noreviews'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setNoreviews(java.lang.Integer value) {
      validate(fields()[9], value);
      this.noreviews = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'noreviews' field has been set.
      * @return True if the 'noreviews' field has been set, false otherwise.
      */
    public boolean hasNoreviews() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'noreviews' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearNoreviews() {
      noreviews = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'star5' field.
      * @return The value.
      */
    public java.lang.Integer getStar5() {
      return star5;
    }


    /**
      * Sets the value of the 'star5' field.
      * @param value The value of 'star5'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setStar5(java.lang.Integer value) {
      validate(fields()[10], value);
      this.star5 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'star5' field has been set.
      * @return True if the 'star5' field has been set, false otherwise.
      */
    public boolean hasStar5() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'star5' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearStar5() {
      star5 = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'star4' field.
      * @return The value.
      */
    public java.lang.Integer getStar4() {
      return star4;
    }


    /**
      * Sets the value of the 'star4' field.
      * @param value The value of 'star4'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setStar4(java.lang.Integer value) {
      validate(fields()[11], value);
      this.star4 = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'star4' field has been set.
      * @return True if the 'star4' field has been set, false otherwise.
      */
    public boolean hasStar4() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'star4' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearStar4() {
      star4 = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'star3' field.
      * @return The value.
      */
    public java.lang.Integer getStar3() {
      return star3;
    }


    /**
      * Sets the value of the 'star3' field.
      * @param value The value of 'star3'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setStar3(java.lang.Integer value) {
      validate(fields()[12], value);
      this.star3 = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'star3' field has been set.
      * @return True if the 'star3' field has been set, false otherwise.
      */
    public boolean hasStar3() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'star3' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearStar3() {
      star3 = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'star2' field.
      * @return The value.
      */
    public java.lang.Integer getStar2() {
      return star2;
    }


    /**
      * Sets the value of the 'star2' field.
      * @param value The value of 'star2'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setStar2(java.lang.Integer value) {
      validate(fields()[13], value);
      this.star2 = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'star2' field has been set.
      * @return True if the 'star2' field has been set, false otherwise.
      */
    public boolean hasStar2() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'star2' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearStar2() {
      star2 = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'star1' field.
      * @return The value.
      */
    public java.lang.Integer getStar1() {
      return star1;
    }


    /**
      * Sets the value of the 'star1' field.
      * @param value The value of 'star1'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setStar1(java.lang.Integer value) {
      validate(fields()[14], value);
      this.star1 = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'star1' field has been set.
      * @return True if the 'star1' field has been set, false otherwise.
      */
    public boolean hasStar1() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'star1' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearStar1() {
      star1 = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'fulfilled' field.
      * @return The value.
      */
    public int getFulfilled() {
      return fulfilled;
    }


    /**
      * Sets the value of the 'fulfilled' field.
      * @param value The value of 'fulfilled'.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder setFulfilled(int value) {
      validate(fields()[15], value);
      this.fulfilled = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'fulfilled' field has been set.
      * @return True if the 'fulfilled' field has been set, false otherwise.
      */
    public boolean hasFulfilled() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'fulfilled' field.
      * @return This builder.
      */
    public org.cogesak.domain.generated.Sales.Builder clearFulfilled() {
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sales build() {
      try {
        Sales record = new Sales();
        record.salesid = fieldSetFlags()[0] ? this.salesid : (java.lang.Integer) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.rating = fieldSetFlags()[2] ? this.rating : (java.lang.Double) defaultValue(fields()[2]);
        record.category = fieldSetFlags()[3] ? this.category : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.platform = fieldSetFlags()[4] ? this.platform : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.price = fieldSetFlags()[5] ? this.price : (java.lang.Integer) defaultValue(fields()[5]);
        record.actualprice = fieldSetFlags()[6] ? this.actualprice : (java.lang.Integer) defaultValue(fields()[6]);
        record.offer = fieldSetFlags()[7] ? this.offer : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.noratings = fieldSetFlags()[8] ? this.noratings : (java.lang.Integer) defaultValue(fields()[8]);
        record.noreviews = fieldSetFlags()[9] ? this.noreviews : (java.lang.Integer) defaultValue(fields()[9]);
        record.star5 = fieldSetFlags()[10] ? this.star5 : (java.lang.Integer) defaultValue(fields()[10]);
        record.star4 = fieldSetFlags()[11] ? this.star4 : (java.lang.Integer) defaultValue(fields()[11]);
        record.star3 = fieldSetFlags()[12] ? this.star3 : (java.lang.Integer) defaultValue(fields()[12]);
        record.star2 = fieldSetFlags()[13] ? this.star2 : (java.lang.Integer) defaultValue(fields()[13]);
        record.star1 = fieldSetFlags()[14] ? this.star1 : (java.lang.Integer) defaultValue(fields()[14]);
        record.fulfilled = fieldSetFlags()[15] ? this.fulfilled : (java.lang.Integer) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sales>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sales>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sales>
    READER$ = (org.apache.avro.io.DatumReader<Sales>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.salesid);

    out.writeString(this.title);

    out.writeDouble(this.rating);

    out.writeString(this.category);

    out.writeString(this.platform);

    out.writeInt(this.price);

    out.writeInt(this.actualprice);

    out.writeString(this.offer);

    if (this.noratings == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.noratings);
    }

    if (this.noreviews == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.noreviews);
    }

    if (this.star5 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.star5);
    }

    if (this.star4 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.star4);
    }

    if (this.star3 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.star3);
    }

    if (this.star2 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.star2);
    }

    if (this.star1 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.star1);
    }

    out.writeInt(this.fulfilled);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.salesid = in.readInt();

      this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);

      this.rating = in.readDouble();

      this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);

      this.platform = in.readString(this.platform instanceof Utf8 ? (Utf8)this.platform : null);

      this.price = in.readInt();

      this.actualprice = in.readInt();

      this.offer = in.readString(this.offer instanceof Utf8 ? (Utf8)this.offer : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.noratings = null;
      } else {
        this.noratings = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.noreviews = null;
      } else {
        this.noreviews = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.star5 = null;
      } else {
        this.star5 = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.star4 = null;
      } else {
        this.star4 = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.star3 = null;
      } else {
        this.star3 = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.star2 = null;
      } else {
        this.star2 = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.star1 = null;
      } else {
        this.star1 = in.readInt();
      }

      this.fulfilled = in.readInt();

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.salesid = in.readInt();
          break;

        case 1:
          this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          break;

        case 2:
          this.rating = in.readDouble();
          break;

        case 3:
          this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          break;

        case 4:
          this.platform = in.readString(this.platform instanceof Utf8 ? (Utf8)this.platform : null);
          break;

        case 5:
          this.price = in.readInt();
          break;

        case 6:
          this.actualprice = in.readInt();
          break;

        case 7:
          this.offer = in.readString(this.offer instanceof Utf8 ? (Utf8)this.offer : null);
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.noratings = null;
          } else {
            this.noratings = in.readInt();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.noreviews = null;
          } else {
            this.noreviews = in.readInt();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.star5 = null;
          } else {
            this.star5 = in.readInt();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.star4 = null;
          } else {
            this.star4 = in.readInt();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.star3 = null;
          } else {
            this.star3 = in.readInt();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.star2 = null;
          } else {
            this.star2 = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.star1 = null;
          } else {
            this.star1 = in.readInt();
          }
          break;

        case 15:
          this.fulfilled = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










